#!/usr/bin/env make

ifeq ($(shell uname -o), Msys)
MKDOCS = .venv/Scripts/mkdocs
PYTHON_ROOT = python
PYTHON_LOCAL = .venv/Scripts/python
PIP_LOCAL = .venv/Scripts/pip
else ifeq ($(shell uname -o), MinGW)
MKDOCS = .venv/Scripts/mkdocs
PYTHON_ROOT = python
PYTHON_LOCAL = .venv/Scripts/python
PIP_LOCAL = .venv/Scripts/pip
else
MKDOCS = .venv/bin/mkdocs
PYTHON_ROOT = python3
PYTHON_LOCAL = .venv/bin/python
PIP_LOCAL = .venv/bin/pip
endif

.PHONY: default
default: help

.PHONY: clean
## Remove all autogenerated files
clean:
	-rm -rf .coverage .pytest_cache build dist site src/main/pyplus.egg-info

.PHONY: clean-all
## Remove all autogenerated files and local virtual environment
clean-all: clean
	-rm -rf .tox .venv

.PHONY: docs-build
## Build the documents using mkdocs
docs-build: docs-make
	$(MKDOCS) build --clean --strict

.PHONY: docs-clean
## Remove autogenerated documentation
docs-clean:
	rm -f ./docs/index.md
	rm -rf ./site

.PHONY: docs-deploy
## Deploy documentation to github (should only be run by travis ci)
docs-deploy: docs-make
	mkdocs gh-deploy --clean --force --remote-name https://$(GITHUB_TOKEN)@github.com/alexbahnisch/pyplus.git

.PHONY: docs-make
## Autogenerate documentation from docstrings and usages
docs-make: docs-clean
	cp ./README.md ./docs/index.md
	.venv/Scripts/pydoc2markdown pyplus.abstract --output ./docs/abstract.md --usage-dir ./docs/usage/abstract
	.venv/Scripts/pydoc2markdown pyplus.common --output ./docs/common.md --usage-dir ./docs/usage/common
	.venv/Scripts/pydoc2markdown pyplus.data --output ./docs/data.md --usage-dir ./docs/usage/data
	.venv/Scripts/pydoc2markdown pyplus.decorators --output ./docs/decorators.md --usage-dir ./docs/usage/decorators
	.venv/Scripts/pydoc2markdown pyplus.json --output ./docs/json.md --usage-dir ./docs/usage/json
	.venv/Scripts/pydoc2markdown pyplus.object --output ./docs/object.md --usage-dir ./docs/usage/object
	.venv/Scripts/pydoc2markdown pyplus.parse --output ./docs/parse.md --usage-dir ./docs/usage/parse
	.venv/Scripts/pydoc2markdown pyplus.path --output ./docs/path.md --usage-dir ./docs/usage/path
	.venv/Scripts/pydoc2markdown pyplus.string --output ./docs/string.md --usage-dir ./docs/usage/string
	.venv/Scripts/pydoc2markdown pyplus.table --output ./docs/table.md --usage-dir ./docs/usage/table
	sed -i -e '/<!---StartDelete--->/,/<!---EndDelete--->/d' ./docs/index.md

.PHONY: docs-serve
## Server documentation locally
docs-serve: docs-make
	$(MKDOCS) serve --dev-addr localhost:8001 --livereload

.PHONY: init
## Initialise local virtual environment
init:
	$(PYTHON_ROOT) -m venv .venv
	$(PYTHON_LOCAL) -m pip install --upgrade pip

.PHONY: install
## Install this package and all develop dependencies to locally virtual environment in development mode
install:
	$(PIP_LOCAL) install -e .[develop]

.PHONY: test
## Run tests virtual environment
test:
	$(PYTHON_LOCAL) setup.py test

.PHONY: tox
## Run tests in tox on all target environments
tox:
	.venv/Scripts/tox

.PHONY: uninstall
## Uninstall this package from local virtual environment
uninstall:
	$(PIP_LOCAL) uninstall pyplus[develop]

################################ HELPER TARGETS - DO NOT EDIT #############################
## `help` target will show description of each target
## Target description should be immediate line before target starting with `##`

# COLORS
RED    := $(shell tput -Txterm setaf 1)
GREEN  := $(shell tput -Txterm setaf 2)
YELLOW := $(shell tput -Txterm setaf 3)
WHITE  := $(shell tput -Txterm setaf 7)
RESET  := $(shell tput -Txterm sgr0)

TARGET_MAX_CHAR_NUM=20
## Show help
help:
	@echo ''
	@echo 'Usage:'
	@echo '  $(YELLOW)make$(RESET) $(GREEN)<target>$(RESET)'
	@echo ''
	@echo 'Targets:'
	@awk '/^[a-zA-Z\-\_0-9]+:/ { \
		helpMessage = match(lastLine, /^## (.*)/); \
		if (helpMessage) { \
			split($$1, arr, ":"); \
			helpCommand = arr[1]; \
			helpMessage = substr(lastLine, RSTART + 3, RLENGTH); \
			printf "  $(YELLOW)%-$(TARGET_MAX_CHAR_NUM)s$(RESET) $(GREEN)%s$(RESET)\n", helpCommand, helpMessage; \
		} \
	} \
	{ lastLine = $$0 }' $(MAKEFILE_LIST)

.PHONY: help
